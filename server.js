const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const bcrypt = require("bcryptjs");

const app = express();

app.use(
  cors({
    origin: [
      "http://localhost:3000",
      "https://mk-diploma-natalina-app.vercel.app",
    ],
    methods: ["GET", "POST", "PUT", "DELETE"],
    allowedHeaders: ["Content-Type"],
  })
);

app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// ===================== –°–•–ï–ú–´ –ò –ú–û–î–ï–õ–ò =====================

// ‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã
const ProductSchema = new mongoose.Schema({
  title: String,
  product_line: String,
  item_code: String,
  price: Number,
  description: String,
  ingredients: String,
  category: String,
  target_area: String,
  tags: [String],
  value: String,
  value_descriptor: String,
  images: [String],
  average_rating: Number,
  ratings_count: Number,
});

const Product = mongoose.model("Product", ProductSchema, "Products");

// ‚úÖ –û—Ç–∑—ã–≤—ã
const ReviewSchema = new mongoose.Schema(
  {
    product_id: mongoose.Schema.Types.ObjectId,
    user_id: mongoose.Schema.Types.ObjectId,
    rating: Number,
    comment: String,
    status: {
      type: String,
      enum: ["–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", "–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω"],
      default: "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
    },
    created_at: {
      type: Date,
      default: Date.now,
    },
  },
  { versionKey: false }
);

const Review = mongoose.model("Review", ReviewSchema, "Reviews");

// ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
const UserSchema = new mongoose.Schema(
  {
    password_hash: String,
    name: String,
    phone: {
      type: String,
      required: true,
      unique: true,
    },
    role: {
      type: String,
      default: "user", // ‚Üê –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    },
    created_at: {
      type: Date,
      default: Date.now,
    },
  },
  { versionKey: false }
);

const User = mongoose.model("User", UserSchema, "Users");

// ‚úÖ –ó–∞–∫–∞–∑—ã
const OrderSchema = new mongoose.Schema(
  {
    user_id: mongoose.Schema.Types.ObjectId,
    consultant_id: String,
    name: String,
    phone: String,
    products: [
      {
        product_id: mongoose.Schema.Types.ObjectId,
        title: String,
        quantity: Number,
        price: Number,
      },
    ],
    total_amount: Number,
    status: String,
    created_at: {
      type: Date,
      default: Date.now,
    },
    city: String,
    district: String,
    metro: String,
    comment: String,
  },
  { versionKey: false }
);

const Order = mongoose.model("Order", OrderSchema, "Orders");

// ===================== –≠–ù–î–ü–û–ò–ù–¢–´ =====================

// üîπ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
app.get("/products", async (req, res) => {
  try {
    const products = await Product.find();
    res.json(products);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤", error });
  }
});

// üîπ –û–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç
app.get("/products/:id", async (req, res) => {
  try {
    const product = await Product.findById(req.params.id);
    if (!product) return res.status(404).json({ message: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    res.json(product);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞", error });
  }
});

// üîπ –í—Å–µ –æ—Ç–∑—ã–≤—ã
app.get("/reviews", async (req, res) => {
  try {
    const reviews = await Review.find();
    res.json(reviews);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤", error });
  }
});

// üîπ –û—Ç–∑—ã–≤—ã –ø–æ —Ç–æ–≤–∞—Ä—É
app.get("/reviews/:productId", async (req, res) => {
  try {
    const reviews = await Review.find({ product_id: req.params.productId });
    res.json(reviews);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤", error });
  }
});

// üîπ –û—Ç–∑—ã–≤—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get("/reviews/user/:userId", async (req, res) => {
  try {
    const { userId } = req.params;

    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç userId" });
    }

    const reviews = await Review.find({
      user_id: new mongoose.Types.ObjectId(userId),
    });
    res.json(reviews);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    res
      .status(500)
      .json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", error });
  }
});

// üîπ –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
app.post("/reviews", async (req, res) => {
  try {
    const { product_id, user_id, rating, comment } = req.body;

    const existingReview = await Review.findOne({ product_id, user_id });
    if (existingReview) {
      return res
        .status(400)
        .json({ message: "–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞" });
    }

    const newReview = await Review.create({
      product_id,
      user_id,
      rating,
      comment,
      status: "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
    });

    res.status(201).json({ message: "–û—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏", review: newReview });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞", error });
  }
});

// üîπ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
app.get("/users", async (req, res) => {
  try {
    const users = await User.find();
    res.json(users);
  } catch (error) {
    res
      .status(500)
      .json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", error });
  }
});

// üîπ –û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
app.get("/users/:userId", async (req, res) => {
  try {
    const user = await User.findById(req.params.userId);
    if (!user)
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    res.json(user);
  } catch (error) {
    res
      .status(500)
      .json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", error });
  }
});

// üîπ –í—Å–µ –∑–∞–∫–∞–∑—ã
app.get("/orders", async (req, res) => {
  try {
    const orders = await Order.find();
    res.json(orders);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤", error });
  }
});

// üîπ –ó–∞–∫–∞–∑—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get("/orders/:userId", async (req, res) => {
  try {
    const orders = await Order.find({ user_id: req.params.userId });
    res.json(orders);
  } catch (error) {
    res
      .status(500)
      .json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", error });
  }
});

// üîπ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
app.post("/orders", async (req, res) => {
  try {
    let userId = null;

    // –ï—Å–ª–∏ –µ—Å—Ç—å phone ‚Äî –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
    if (req.body.phone) {
      const existingUser = await User.findOne({ phone: req.body.phone });
      if (existingUser) {
        userId = existingUser._id;
      }
    }

    const order = await Order.create({
      ...req.body,
      user_id: userId, // ‚Üê –ª–∏–±–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–π, –ª–∏–±–æ null
    });

    res.status(201).json(order);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", error });
  }
});

// üîπ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
app.post("/users/login", async (req, res) => {
  const { phone, password } = req.body;

  try {
    const cleanPhone = "+7" + phone.replace(/\D/g, "").slice(-10);

    const user = await User.findOne({ phone: cleanPhone });

    if (!user) {
      return res
        .status(401)
        .json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const isMatch = await bcrypt.compare(password, user.password_hash);
    if (!isMatch) {
      return res.status(401).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" });
    }

    res.json({
      _id: user._id,
      name: user.name,
      phone: user.phone,
      role: user.role,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:", error);
    res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
app.get("/users/phone/:phone", async (req, res) => {
  try {
    const user = await User.findOne({ phone: req.params.phone });
    if (!user) {
      return res.status(404).json({ exists: false });
    }
    res.json({ exists: true, name: user.name });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", error });
  }
});

// üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–º–µ–Ω–∏ –∏ –Ω–æ–º–µ—Ä–∞
app.post("/users/check-phone", async (req, res) => {
  let { phone, name } = req.body;

  // üîß –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX
  phone = "+7" + phone.replace(/\D/g, "").slice(-10);

  try {
    const user = await User.findOne({ phone });
    if (!user) {
      return res.json({ exists: false });
    }

    const isNameMatch =
      user.name.trim().toLowerCase() === name.trim().toLowerCase();

    if (!isNameMatch) {
      return res.status(409).json({
        message:
          "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å –¥—Ä—É–≥–∏–º –∏–º–µ–Ω–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.",
      });
    }

    res.json({ exists: true, matched: true });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞", error });
  }
});

// üîπ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post("/users", async (req, res) => {
  try {
    const { name, phone, password, role } = req.body;

    if (!name || !phone || !password) {
      return res.status(400).json({ message: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    const existing = await User.findOne({ phone });
    if (existing) {
      return res
        .status(409)
        .json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
    }

    const password_hash = await bcrypt.hash(password, 10);

    const newUser = await User.create({ name, phone, role, password_hash });
    res.status(201).json(newUser);
  } catch (error) {
    res
      .status(500)
      .json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", error });
  }
});

// üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.put("/users/:userId", async (req, res) => {
  try {
    const { name, phone, password, role } = req.body;

    const updateData = { name, phone, role };
    if (password) {
      updateData.password_hash = await bcrypt.hash(password, 10);
    }

    const updatedUser = await User.findByIdAndUpdate(
      req.params.userId,
      updateData,
      { new: true }
    );

    if (!updatedUser) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    res.json(updatedUser);
  } catch (error) {
    res
      .status(500)
      .json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", error });
  }
});

// üîπ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.delete("/users/:userId", async (req, res) => {
  try {
    const deleted = await User.findByIdAndDelete(req.params.userId);
    if (!deleted) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    res.json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω" });
  } catch (error) {
    res
      .status(500)
      .json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", error });
  }
});

// üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
app.put("/orders/:id", async (req, res) => {
  try {
    const updated = await Order.findByIdAndUpdate(req.params.id, req.body, {
      new: true,
    });
    if (!updated) return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    res.json(updated);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", error });
  }
});

// üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
app.put("/reviews/:id", async (req, res) => {
  try {
    const review = await Review.findById(req.params.id);
    if (!review) return res.status(404).json({ message: "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    const updatedReview = await Review.findByIdAndUpdate(req.params.id, req.body, { new: true });

    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ "–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω", –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    if (req.body.status === "–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω") {
      const approvedReviews = await Review.find({
        product_id: review.product_id,
        status: "–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω",
      });

      const ratings = approvedReviews.map(r => r.rating);
      const average = ratings.reduce((acc, r) => acc + r, 0) / ratings.length;

      await Product.findByIdAndUpdate(review.product_id, {
        average_rating: parseFloat(average.toFixed(2)),
        ratings_count: ratings.length,
      });
    }

    res.json({ message: "–û—Ç–∑—ã–≤ –æ–±–Ω–æ–≤–ª—ë–Ω", review: updatedReview });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞", error });
  }
});

// üîπ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
app.delete("/reviews/:id", async (req, res) => {
  try {
    const deleted = await Review.findByIdAndDelete(req.params.id);
    if (!deleted) return res.status(404).json({ message: "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    res.json({ message: "–û—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω" });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞", error });
  }
});

// ===================== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê =====================
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
